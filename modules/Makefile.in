SHELL       := @SHELL@

# Support out-of-tree builds
srcdir      := @srcdir@
VPATH       := @srcdir@

prefix      := @prefix@
exec_prefix := @exec_prefix@
datarootdir := @datarootdir@
bindir      := @bindir@
datadir     := @datadir@
sysconfdir  := @sysconfdir@
libdir      := @libdir@
sbindir     := @sbindir@
localstatedir := @localstatedir@
CXX      := @CXX@
# CXXFLAGS are for the main binary, so don't use them here, use MODFLAGS instead
MODFLAGS := @CPPFLAGS@ @MODFLAGS@ -I$(srcdir)/..
MODLINK  := @MODLINK@
LDFLAGS  := @LDFLAGS@
# LIBS are not and should not be used in here.
# The znc binary links already against those.
# LIBS     := @LIBS@
PERL_ON  := @PERL@
PERL     := @PERL_BINARY@
PYCFG    := @PYTHONCFG_BINARY@
SWIG     := @SWIG_BINARY@
MODDIR   := @MODDIR@
DATADIR  := @DATADIR@
LIBZNC   := @LIBZNC@
LIBZNCDIR:= @LIBZNCDIR@
INSTALL         := @INSTALL@
INSTALL_PROGRAM := @INSTALL_PROGRAM@
INSTALL_SCRIPT  := @INSTALL_SCRIPT@
INSTALL_DATA    := @INSTALL_DATA@
DISTDIR  := @DISTDIR@

TCL_FLAGS:= @TCL_FLAGS@

ifneq "$(V)" ""
VERBOSE=1
endif
ifeq "$(VERBOSE)" ""
Q=@
E=@echo
else
Q=
E=@\#
endif

ifneq "$(LIBZNC)" ""
LDFLAGS += -L.. -lznc -Wl,-rpath,$(LIBZNCDIR)
endif

FILES    := $(notdir $(wildcard $(srcdir)/*.cpp))
# If extra is enabled
ifeq "@EXTRA@" "yes"
FILES    += $(addprefix extra/, $(notdir $(wildcard $(srcdir)/extra/*.cpp)))
endif

FILES    := $(basename $(FILES))

DISTFILES := Makefile.in
# Add the source files
DISTFILES += $(addsuffix .cpp, $(FILES))
# Add perl modules
DISTFILES += $(shell echo $(srcdir)/*.pm | sed -e "s:$(srcdir)/::g")

ifeq "@NOSSL@" "1"
FILES    := $(foreach file, $(FILES), \
	$(if $(shell grep REQUIRESSL $(srcdir)/$(file).cpp), \
		, \
		$(basename $(file)) \
	))
endif

ifeq "$(PERL_ON)" "yes"
# We execute this now so that we see the 'beauty' of these flags in make's output
PERLCOMMON   := $(shell $(PERL) -MExtUtils::Embed -e perl_inc -e ldopts)
# Perl API is ugly, casting string literals to char* and redeclaring functions :(
PERLCOMMON   += -Wno-write-strings -Wno-redundant-decls -Wno-missing-declarations
# This is for SWIG
PERLCOMMON   += -DSWIG_TYPE_TABLE=znc
modperlFLAGS := $(PERLCOMMON)
# Find additional headers for out-of-tree build
modperlFLAGS += -I.
PERLHOOK     := modperl_install
else
FILES    := $(shell echo $(FILES) | sed -e "s/modperl//")
endif

ifneq "$(PYCFG)" ""
PYTHONCOMMON := $(shell $(PYCFG) --includes) $(shell $(PYCFG) --ldflags)
PYTHONCOMMON += -DSWIG_TYPE_TABLE=znc
PYTHONCOMMON += -Wno-missing-field-initializers -Wno-unused -Wno-shadow
PYTHONCOMMON += -Wno-missing-declarations -Wno-uninitialized
modpythonFLAGS := $(PYTHONCOMMON) -I.
PYTHONHOOK   := modpython_install
else
FILES    := $(shell echo $(FILES) | sed -e "s/modpython//")
endif

ifeq "@SASL@" ""
FILES    := $(shell echo $(FILES) | sed -e "s:extra/saslauth::")
endif
saslauthFLAGS := -lsasl2

ifeq "@CHARSET@" ""
FILES    := $(shell echo $(FILES) | sed -e "s:extra/charset::")
endif
charsetFLAGS := @LIBICONV@

ifeq "$(TCL_FLAGS)" ""
FILES       := $(shell echo $(FILES) | sed -e "s:extra/modtcl::")
else
TCLHOOK     := modtcl_install
endif
modtclFLAGS := $(TCL_FLAGS)


TARGETS  := $(addsuffix .so, $(FILES))

CLEAN    := *.so extra/*.so
CLEAN    += modperl/ZNC.so modperl/ZNC.pm modpython/functions.cpp modpython/compiler
CLEAN    += modpython/_znc_core.so modpython/_znc_core.cpp modpython/znc_core.py modpython/znc_core.pyc

.PHONY: all clean install install_metadirs create_install_dir uninstall
.PHONY: modperl_install modtcl_install modpython_install modpython_compilepyc

all: $(TARGETS)

install: all create_install_dir install_metadirs $(PERLHOOK) $(TCLHOOK) $(PYTHONHOOK)
	$(INSTALL_PROGRAM) $(TARGETS) $(DESTDIR)$(MODDIR)

create_install_dir:
	mkdir -p $(DESTDIR)$(MODDIR)
	mkdir -p $(DESTDIR)$(DATADIR)
	rm -rf $(DESTDIR)$(MODDIR)/*.so

install_metadirs: create_install_dir
	for a in $(srcdir)/*; do \
		d=$$(echo $$a | sed -e "s:$(srcdir)/::g"); \
		if [ -d $$a ] && [ -f $${d}.so ]; then \
			cp -Rp $$a $(DESTDIR)$(DATADIR); \
		fi \
	done

clean:
	rm -rf $(CLEAN)

%.so: %.cpp Makefile
	@mkdir -p .depend
	@mkdir -p extra
	$(E) Building $(if $(filter %extra/,$(dir $<)),extra )module $(notdir $(basename $@))...
	$(Q)$(CXX) $(MODFLAGS) $(LDFLAGS) $(MODLINK) -o $@ $< $($(notdir $(basename $@))FLAGS) -MMD -MF .depend/$(notdir $@).dep

modperl.so: modperl/ZNC.so modperl/swigperlrun.h
modperl/ZNC.so: modperl/ZNC.cpp Makefile
	$(E) Building ZNC Perl bindings library...
	$(Q)$(CXX) $(MODFLAGS) $(LDFLAGS) $(MODLINK) -I$(srcdir) $(PERLCOMMON) -o $@ $<
ifneq "$(SWIG)" ""
modperl/swigperlrun.h:
	@mkdir -p modperl
	$(Q)$(SWIG) -perl5 -c++ -shadow -external-runtime $@
modperl/ZNC.cpp: modperl/modperl.i Makefile modperl/module.h modperl/CString.i
	$(E) Generating ZNC API for Perl...
	@mkdir -p modperl
	$(Q)$(SWIG) -perl5 -c++ -shadow -outdir modperl -I$(srcdir) -w362,315,401,402 -o $@.warn $<
	$(Q)$(PERL) -pe '$$x==2 and print "items+=0;" and $$x=3;/^XS\(SWIG_init\)/ and $$x=1;$$x==1 and /dXSARGS/ and $$x=2' $@.warn > $@
	$(Q)rm -rf $@.warn
endif

modpython.so: modpython/_znc_core.so modpython/swigpyrun.h
modpython/_znc_core.so: modpython/_znc_core.cpp Makefile modpython/functions.cpp
	$(E) Building ZNC python bindings library...
	$(Q)$(CXX) $(MODFLAGS) $(LDFLAGS) $(MODLINK) -I$(srcdir) $(PYTHONCOMMON) -o $@ $<
ifneq "$(SWIG)" ""
modpython/swigpyrun.h:
	@mkdir -p modpython
	$(Q)$(SWIG) -python -py3 -c++ -shadow -external-runtime $@
modpython/_znc_core.cpp: modpython/modpython.i Makefile
	$(E) Generating ZNC API for python...
	@mkdir -p modpython
	$(Q)$(SWIG) -python -py3 -c++ -shadow -outdir modpython -I$(srcdir) -w362,315,401 -o $@ $<
endif
modpython/functions.cpp: modpython/functions.in
	@mkdir -p modpython
	$(Q)$(PERL) $(srcdir)/modpython/codegen.pl $< $@

modperl_install: create_install_dir install_metadirs
	-for i in $(srcdir)/*.pm; do \
		test -r $$i && $(INSTALL_DATA) $$i $(DESTDIR)$(MODDIR); \
	done
	for a in $(srcdir)/*; do \
		if [ -d $$a ] && [ -f $${a}.pm ]; then \
			cp -Rp $$a $(DESTDIR)$(DATADIR); \
		fi \
	done
	-test -r $(srcdir)/modperl/ZNC.pm && cp -p $(srcdir)/modperl/ZNC.pm modperl/
	rm -rf $(DESTDIR)$(DATADIR)/modperl
	mkdir -p $(DESTDIR)$(MODDIR)/modperl
	$(INSTALL_PROGRAM) modperl/ZNC.so $(DESTDIR)$(MODDIR)/modperl
	$(INSTALL_DATA) modperl/ZNC.pm $(DESTDIR)$(MODDIR)/modperl
	$(INSTALL_DATA) $(srcdir)/modperl/startup.pl $(DESTDIR)$(MODDIR)/modperl

modpython/compiler: modpython/compiler.cpp
	$(CXX) $(PYTHONCOMMON) -o $@ $<

modpython_compilepyc: modpython/compiler
	-cp -p $(srcdir)/*.py ./
	-cp -p $(srcdir)/*.pyc ./
	-cp -p $(srcdir)/modpython/znc*.py modpython/
	$<

modpython_install: create_install_dir install_metadirs modpython_compilepyc
	-for i in *.pyc; do \
		test -r $$i && $(INSTALL_DATA) $$i $(DESTDIR)$(MODDIR); \
	done
	for a in $(srcdir)/*; do \
		if [ -d $$a ]; then \
			if [ -f $${a}.py ] || [ -f $${a}.pyc ]; then \
				cp -Rp $$a $(DESTDIR)$(DATADIR); \
			fi \
		fi \
	done
	rm -rf $(DESTDIR)$(DATADIR)/modpython
	mkdir -p $(DESTDIR)$(MODDIR)/modpython
	$(INSTALL_PROGRAM) modpython/_znc_core.so $(DESTDIR)$(MODDIR)/modpython
	$(INSTALL_DATA) modpython/znc_core.pyc $(DESTDIR)$(MODDIR)/modpython
	$(INSTALL_DATA) modpython/znc.pyc $(DESTDIR)$(MODDIR)/modpython

modtcl_install:
	mkdir -p $(DESTDIR)$(DATADIR)/modtcl/
	$(INSTALL_DATA) $(srcdir)/extra/modtcl.tcl $(srcdir)/extra/binds.tcl $(DESTDIR)$(DATADIR)/modtcl/

uninstall:
	# Yes, we are lazy, just remove everything in there
	rm -rf $(DESTDIR)$(MODDIR)/*
	rm -rf $(DESTDIR)$(DATADIR)/*
	rmdir $(DESTDIR)$(MODDIR)
	rmdir $(DESTDIR)$(DATADIR)

distdir:
	mkdir ../$(DISTDIR)/modules
	for file in $(DISTFILES) ; do \
		cp $(srcdir)/$$file ../$(DISTDIR)/modules || exit 1 ; \
	done

-include $(wildcard .depend/*.dep)
