SHELL       := @SHELL@

# Support out-of-tree builds
srcdir      := @srcdir@
VPATH       := @srcdir@

prefix      := @prefix@
exec_prefix := @exec_prefix@
datarootdir := @datarootdir@
bindir      := @bindir@
datadir     := @datadir@
sysconfdir  := @sysconfdir@
libdir      := @libdir@
includedir  := @includedir@
sbindir     := @sbindir@
localstatedir := @localstatedir@
CXX      := @CXX@
CXXFLAGS := @CPPFLAGS@ @CXXFLAGS@
LDFLAGS  := @LDFLAGS@
LIBS     := @LIBS@
LIBZNC   := @LIBZNC@
LIBZNCDIR:= @LIBZNCDIR@
MODDIR   := @MODDIR@
DATADIR  := @DATADIR@
PKGCONFIGDIR := $(libdir)/pkgconfig
INSTALL         := @INSTALL@
INSTALL_PROGRAM := @INSTALL_PROGRAM@
INSTALL_SCRIPT  := @INSTALL_SCRIPT@
INSTALL_DATA    := @INSTALL_DATA@
DISTDIR  := @DISTDIR@
DIST     := $(DISTDIR).tar.gz

LIB_SRCS  := ZNCString.cpp Csocket.cpp znc.cpp User.cpp IRCSock.cpp Client.cpp DCCBounce.cpp \
	DCCSock.cpp Chan.cpp Nick.cpp Server.cpp Modules.cpp MD5.cpp Buffer.cpp Utils.cpp \
	FileUtils.cpp HTTPSock.cpp Template.cpp ClientCommand.cpp Socket.cpp SHA256.cpp \
	WebModules.cpp Listener.cpp
BIN_SRCS  := main.cpp
LIB_OBJS  := $(patsubst %cpp,%o,$(LIB_SRCS))
BIN_OBJS  := $(patsubst %cpp,%o,$(BIN_SRCS))
CLEAN     := znc *.o core core.*
DISTCLEAN := Makefile config.log config.status znc-config znc-buildmod .depend \
	modules/.depend modules/Makefile man/Makefile znc.pc znc-uninstalled.pc $(DIST)
DISTFILES := $(LIB_SRCS) $(BIN_SRCS) Makefile.in configure configure.in install-sh
DISTFILES += znc-config.in znc-buildmod.in znc.pc.in znc-uninstalled.pc.in *.h
DISTFILES += config.sub config.guess

ifneq "$(V)" ""
VERBOSE=1
endif
ifeq "$(VERBOSE)" ""
Q=@
E=@echo
C=-s
else
Q=
E=@\#
C=
endif

.PHONY: all man modules clean distclean install

all: znc man modules $(LIBZNC)
	@echo ""
	@echo " ZNC was successfully compiled. You may use"
	@echo " '$(MAKE) install' to install ZNC to '$(prefix)'."
	@echo " You can then use '$(bindir)/znc --makeconf'"
	@echo " to generate a config file."
	@echo ""
	@echo " If you need help with using ZNC, please visit our wiki at:"
	@echo "   http://znc.in"

ifeq "$(LIBZNC)" ""
OBJS := $(BIN_OBJS) $(LIB_OBJS)

znc: $(OBJS)
	$(E) Linking znc...
	$(Q)$(CXX) $(LDFLAGS) -o $@ $(OBJS) $(LIBS)
else
znc: $(BIN_OBJS) $(LIBZNC)
	$(E) Linking znc...
	$(Q)$(CXX) $(LDFLAGS) -o $@ $(BIN_OBJS) -L. -lznc -Wl,-rpath,$(LIBZNCDIR) $(LIBS)

$(LIBZNC): $(LIB_OBJS)
	$(E) Linking $(LIBZNC)...
	$(Q)$(CXX) $(LDFLAGS) -shared -o $@ $(LIB_OBJS) $(LIBS)
endif

man:
	@$(MAKE) -C man $(C)

modules: $(LIBZNC)
	@$(MAKE) -C modules $(C)

clean:
	rm -rf $(CLEAN)
	@$(MAKE) -C modules clean;
	@$(MAKE) -C man clean

distclean: clean
	rm -rf $(DISTCLEAN)

%.o: %.cpp Makefile
	@mkdir -p .depend
	$(E) Building $@...
	$(Q)$(CXX) $(CXXFLAGS) -c -o $@ $< -MMD -MF .depend/$@.dep

install: znc $(LIBZNC)
	mkdir -p $(DESTDIR)$(bindir)
	mkdir -p $(DESTDIR)$(includedir)/znc
	mkdir -p $(DESTDIR)$(PKGCONFIGDIR)
	mkdir -p $(DESTDIR)$(MODDIR)
	mkdir -p $(DESTDIR)$(DATADIR)
	cp -Rp $(srcdir)/webskins $(DESTDIR)$(DATADIR)
	$(INSTALL_PROGRAM) znc $(DESTDIR)$(bindir)
	$(INSTALL_SCRIPT) znc-config $(DESTDIR)$(bindir)
	$(INSTALL_SCRIPT) znc-buildmod $(DESTDIR)$(bindir)
	$(INSTALL_DATA) $(srcdir)/*.h $(DESTDIR)$(includedir)/znc
	$(INSTALL_DATA) znc.pc $(DESTDIR)$(PKGCONFIGDIR)
	@$(MAKE) -C modules install DESTDIR=$(DESTDIR);
	if test -n "$(LIBZNC)"; then \
		mkdir -p $(DESTDIR)$(LIBZNCDIR) || exit 1 ; \
		$(INSTALL_PROGRAM) $(LIBZNC) $(DESTDIR)$(LIBZNCDIR) || exit 1 ; \
	fi
	@$(MAKE) -C man install DESTDIR=$(DESTDIR)

uninstall:
	rm $(DESTDIR)$(bindir)/znc
	rm $(DESTDIR)$(bindir)/znc-config
	rm $(DESTDIR)$(bindir)/znc-buildmod
	rm $(DESTDIR)$(includedir)/znc/*.h
	rm $(DESTDIR)$(PKGCONFIGDIR)/znc.pc
	rm -rf $(DESTDIR)$(MODDIR)/webskins
	if test -n "$(LIBZNC)"; then \
		rm $(DESTDIR)$(LIBZNCDIR)/$(LIBZNC) || exit 1 ; \
		rmdir $(DESTDIR)$(LIBZNCDIR) || exit 1 ; \
	fi
	@$(MAKE) -C man uninstall DESTDIR=$(DESTDIR)
	@if test -n "modules"; then \
		$(MAKE) -C modules uninstall DESTDIR=$(DESTDIR); \
	fi
	rmdir $(DESTDIR)$(bindir)
	rmdir $(DESTDIR)$(includedir)/znc
	rmdir $(DESTDIR)$(PKGCONFIGDIR)
	@echo "Successfully uninstalled, but empty directories were left behind"

distdir:
	rm -rf $(DISTDIR)
	mkdir $(DISTDIR)
	mkdir $(DISTDIR)/webskins
	cp -rp $(srcdir)/webskins $(DISTDIR)/webskins/
	for file in $(DISTFILES) ; do \
		cp $(srcdir)/$$file $(DISTDIR) || exit 1 ; \
	done
	@$(MAKE) -C man distdir
	@$(MAKE) -C modules distdir

dist: distdir
	tar -chf - $(DISTDIR) | gzip --best -c > $(DIST)
	# Clean up behind us
	rm -rf $(DISTDIR)

# The following is heavily inspired by automake's make distcheck
distcheck: distdir
	mkdir $(DISTDIR)/_build
	mkdir $(DISTDIR)/_inst
	# Remove write access on the distdir's content, that way we catch
	# invalid writes
	chmod -R a-w $(DISTDIR)
	# ...but keep our special dirs writable
	chmod a+w $(DISTDIR)/_build $(DISTDIR)/_inst
	# Now do a VPATH (out-of-tree) build in _build with _inst as prefix
	# This tests if VPATH builds work fine
	cd $(DISTDIR)/_inst && INSTDIR=$$(pwd) && cd $$INSTDIR && \
		cd ../_build && \
		../configure --prefix="$$INSTDIR" --enable-extra --enable-tcl --enable-sasl --enable-perl --enable-python && \
		$(MAKE) all
	# We install to _inst, uninstall and check if files are left behind
	cd $(DISTDIR)/_build && \
		$(MAKE) install && \
		$(MAKE) uninstall && \
		$(MAKE) distuninstallcheck DIR=../_inst
	# Next test: remove write access to the install directory...
	chmod -R a-w $(DISTDIR)/_inst
	# ... and check if DESTDIR install works
	cd $(DISTDIR)/_build && \
		$(MAKE) install DESTDIR=./inst_tmp && \
		$(MAKE) uninstall DESTDIR=./inst_tmp && \
		$(MAKE) distuninstallcheck DIR=./inst_tmp && \
		rm -rf ./inst_tmp
	# Yet another text: Check if we ship all the files needed for "make dist"
	# (This also tests "make dist" in a VPATH scenario)
	cd $(DISTDIR)/_build && make dist
	# Now do a "distclean" and check if it leaves files behind
	cd $(DISTDIR)/_build && make distclean
	test $$(find $(DISTDIR)/_build -type f -print | wc -l) -lt 1 || \
		( echo "ERROR: files left after distclean" ; exit 1 )
	# Now test some exotic configure flags
	cd $(DISTDIR)/_build && \
		../configure --disable-modules --disable-openssl --disable-c-ares --disable-ipv6 && \
		$(MAKE) all
	# Ok, time for cleanup
	chmod -R a+w $(DISTDIR)
	rm -rf $(DISTDIR)
	# If we are still here:
	$(MAKE) dist
	@echo
	@echo "All tests succeeded"
	@echo "Have fun with $(DIST)"

distuninstallcheck:
	# Now check if there are any files left behind after "make uninstall"
	cd $(DIR) && \
		test $$(find . -type f -print | wc -l) -lt 1 || \
		( echo "ERROR: files left after uninstall" ; exit 1 )

-include $(wildcard .depend/*.dep)
